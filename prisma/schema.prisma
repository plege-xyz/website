// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model App {
    id          Int           @id @default(autoincrement())
    name        String
    apiKey      String        @unique @default(cuid())
    transfer    Transfer[]
    transaction Transaction[]
    Session     Session[]
}

model User {
    id          Int           @id @unique @default(autoincrement())
    publicId    String        @unique @default(cuid())
    publicKey   String        @unique
    transfer    Transfer[]
    Transaction Transaction[]
}

model Session {
    id         Int      @id @unique @default(autoincrement())
    publicId   String   @unique @default(cuid())
    returnUrl  String
    transfers   Transfer[]
    app        App      @relation(fields: [appId], references: [id])
    appId      Int
}

model Transfer {
    id                 Int          @id @unique @default(autoincrement())
    publicId           String       @unique @default(cuid())
    network            Network
    payer              String?
    recipient          String
    reference          String?
    referencePublicKey String
    amount             Float
    token              Token        @relation(fields: [tokenId], references: [id])
    tokenId            Int
    app                App          @relation(fields: [appId], references: [id])
    appId              Int
    session            Session?     @relation(fields: [sessionId], references: [id])
    sessionId          Int?
    user               User?         @relation(fields: [userId], references: [id])
    userId             Int?
    transaction        Transaction? @relation(fields: [transactionId], references: [id])
    transactionId      Int?         @unique
}

model Transaction {
    id       Int       @id @default(autoincrement())
    publicId String    @unique @default(cuid())
    network  Network
    hash     String    @unique
    status   Status    @default(PENDING)
    app      App       @relation(fields: [appId], references: [id])
    appId    Int
    Transfer Transfer?
    user     User      @relation(fields: [userId], references: [id])
    userId   Int
}

model Token {
    id       Int        @id @unique @default(autoincrement())
    publicId String     @unique @default(cuid())
    network  Network
    mint     String
    decimals Int
    symbol   String     @unique
    name     String
    image    String
    transfer Transfer[]
}

enum Network {
    MAINNET
    TESTNET
    DEVNET
}

enum Status {
    PENDING
    SUCCESS
    FAILED
}
